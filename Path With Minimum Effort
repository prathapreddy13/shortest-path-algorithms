class Solution {
public:
    bool valid(vector<vector<int>> &graph,int effort,int x,int y,vector<vector<bool>> &vis)
    {
        int n=graph.size();
        int m=graph[0].size();
        vis[x][y]=1;
        if(x==n-1&&y==m-1)
            return 1;
       if(x-1>=0&&vis[x-1][y]==0&&abs(graph[x][y]-graph[x-1][y])<=effort)
       {
           if(valid(graph,effort,x-1,y,vis))
               return 1;
       }
        if(x+1<n&&vis[x+1][y]==0&&abs(graph[x][y]-graph[x+1][y])<=effort)
        {
            if(valid(graph,effort,x+1,y,vis))
                return 1;
        }
        if(y-1>=0&&vis[x][y-1]==0&&abs(graph[x][y]-graph[x][y-1])<=effort)
        {
            if(valid(graph,effort,x,y-1,vis))
                return 1;
        }
        if(y+1<m&&vis[x][y+1]==0&&abs(graph[x][y]-graph[x][y+1])<=effort)
        {
            return valid(graph,effort,x,y+1,vis);
        }
        return 0;
        
    }
    int minimumEffortPath(vector<vector<int>>& heights) {
        
        int s=0;
        int e=1e6;
        int ans=e;
        while(s<=e)
        {
            int mid=(s+e)/2;
            vector<vector<bool>> vis(heights.size(),vector<bool> (heights[0].size()));
            if(valid(heights,mid,0,0,vis))
            {
                ans=mid;
                e=mid-1;
            }
            else
            {
                s=mid+1;
            }
        }
        return ans;
        
    }
};
