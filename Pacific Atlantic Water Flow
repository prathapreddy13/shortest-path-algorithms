class Solution {
public:
    vector<vector<int>> dir={{1,0},{0,1},{-1,0},{0,-1}};
    void bfs(vector<vector<int>>& heights,queue<vector<int>> &q,vector<vector<bool>> &vis)
    {
        int n=heights.size();
        int m=heights[0].size();
        while(!q.empty())
        {
            auto temp=q.front();
            q.pop();
            for(auto &d:dir)
            {
                int x=temp[0]+d[0];
                int y=temp[1]+d[1];
                if(x<0||y<0||x>=n||y>=m||vis[x][y]||heights[x][y]<heights[temp[0]][temp[1]])
                    continue;
                vis[x][y]=1;
                q.push({x,y});
            }
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<bool>> pvis(n,vector<bool> (m));
        vector<vector<bool>> avis(n,vector<bool> (m));
        queue<vector<int>> pq;
        queue<vector<int>> aq;
        
        for(int i=0;i<n;i++)
        {
            pvis[i][0]=1;
            pq.push({i,0});
            avis[i][m-1]=1;
            aq.push({i,m-1});
        }
        for(int j=0;j<m;j++)
        {
            pvis[0][j]=1;
            pq.push({0,j});
            avis[n-1][j]=1;
            aq.push({n-1,j});
        }
        
        bfs(heights,pq,pvis);
        bfs(heights,aq,avis);
        vector<vector<int>> ans;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(pvis[i][j]&&avis[i][j])
                {
                    ans.push_back({i,j});
                }
            }
        }
        return ans;
        
        
    }
};
